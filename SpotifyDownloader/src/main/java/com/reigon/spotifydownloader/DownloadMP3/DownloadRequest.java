package com.reigon.spotifydownloader.DownloadMP3;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.util.Date;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.Callable;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class DownloadRequest implements Callable<File> {
	
	/**
	 * The logger for this class
	 */
	private static final Logger logger = LogManager.getLogger(DownloadRequest.class);
	
	/**
	 * Base URL for all the youtube-mp3 API calls
	 */
	public static final String YOUTUBE_MP3 = "http://www.youtube-mp3.org";
	
	/**
	 * The Google JSON parser instance
	 */
	private static final Gson gson = new Gson();

	/**
	 * The ID of the video the user wants to download
	 */
	private final String videoId;
        
        private final String nombreCancion;
        
        private final String path;
	/**
	 * 
	 * @param videoId
	 */
	public DownloadRequest(String videoId, String path, String nombreCancion) {
		this.videoId = videoId;
                this.path = path;
                this.nombreCancion = nombreCancion;
	}

	@Override
	public File call() throws Exception {
		logger.info("looking up video with id: {}", videoId);
		
		/*
		 * First we have to create the lookup request consisting of the video id, the current timestamp, a random hash generated by the
		 * Youtube-MP3 Javascript and some filler variables
		 */
		URLBuilder lookup_builder = new URLBuilder("/a/itemInfo/").addParameter("video_id", videoId).addParameter("ac", "www").addParameter("t", "grp")
				.addParameter("r", new BigDecimal(new Date().getTime()).toString()).hash();

		/*
		 * Send the request and read the JSON file
		 */
		StringBuilder json_builder = new StringBuilder();
		try (Scanner scanner = new Scanner(lookup_builder.build(YOUTUBE_MP3).openStream())) {
			while (scanner.hasNext()) json_builder.append(scanner.nextLine());
		}
		
		/*
		 * www.youtube-mp3.org gives back faulty JSON data, need to remove "info = " at the start and remove the ; at the end
		 */
		json_builder.delete(0, 7).deleteCharAt(json_builder.length() - 1);

		/*
		 * Parse the JSON to a hashmap
		 */
                logger.info("Video ID: " + this.videoId);
		Map<String, Object> response = gson.fromJson(json_builder.toString(), new TypeToken<Map<String, Object>>() {}.getType());
		
		/*
		 * Create a second request to get information about the file.
		 */
		double timestamp = (double) response.get("ts_create");
		URLBuilder file_builder = new URLBuilder("/get").addParameter("video_id", videoId).addParameter("ts_create", (long) timestamp)
				.addParameter("r", response.get("r")).addParameter("h2", response.get("h2")).hash();

		HttpURLConnection connection = (HttpURLConnection) file_builder.build(YOUTUBE_MP3).openConnection();
		InputStream file_stream = connection.getInputStream();
		ReadableByteChannel remote = Channels.newChannel(file_stream);
		
		/*
		 * Create the mp3 file and download it to the correct folder.
		 */
                
		File file = new File(this.path + this.nombreCancion + ".mp3");
		logger.info("downloading file {} from {}", file.getAbsolutePath(), connection.getURL());
		try (RandomAccessFile local = new RandomAccessFile(file, "rw")) {
			local.getChannel().transferFrom(remote, 0, Integer.MAX_VALUE);
			local.close();
			logger.info("download complete of: " + response.get("title"));
			return file;
		} catch (Exception ex) {
			logger.warn("could not download video, removing file...");
			file.delete();
			throw new IOException(ex);
		}
	}

}